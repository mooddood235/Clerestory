#version 460 core

struct Camera{
	vec3 pos;

	vec3 xAxis;
	vec3 yAxis;
	vec3 zAxis;

	float focalLength;
};
struct Ray{
	vec3 origin;
	vec3 dir;
};
struct HitInfo{
	bool didHit;
	float t;
};
struct Volume{
	vec3 cornerMin;
	vec3 cornerMax;

	vec3 center;
};

float Rand();
float cnoise(vec3 p);
vec3 SampleEnvironmentMap(vec3 direction);
vec3 Saturate(vec3 v);

vec2 HitVolume(Volume volume, Ray ray);
vec3 At(Ray ray, float t);

float OpticalDepth(vec3 point, vec3 inDir, float numSteps);
float Phase_Rayleigh(float cosTheta);

layout(local_size_x = 8, local_size_y = 4) in;
layout(rgba32f, binding = 0) uniform image2D finalRenderTexture;
layout(rgba32F, binding = 1) uniform image2D cumulativeRenderTexture;

const HitInfo NoHit = HitInfo(false, 1./0.);

const float EPSILON = 0.0001;
const float PI = 3.14159265359;
const float noiseScale = 0.2;
const float numSteps = 20.0;

uniform float _Time;
uniform float _SampleNum;

uniform sampler2D environmentMap;

uniform Camera camera;

uniform Volume volume;

const vec3 sunPosition = vec3(10.0);

// ---------------------------------------
vec2 _Pixel;
vec2 _RenderTextureDims;
vec2 _UV;

void main(){
	_Pixel = gl_GlobalInvocationID.xy;
	_RenderTextureDims = imageSize(finalRenderTexture);
	_UV = (vec2(gl_GlobalInvocationID) + 0.5) / _RenderTextureDims;

	vec3 worldUV = camera.pos + 
	-camera.zAxis * camera.focalLength + 
	camera.xAxis * (_RenderTextureDims.x / 2.0) * (_UV.x * 2.0 - 1.0) +
	camera.yAxis * (_RenderTextureDims.y / 2.0) * (_UV.y * 2.0 - 1.0);

	Ray ray = Ray(camera.pos, normalize(worldUV - camera.pos));

	vec2 tMinMax = HitVolume(volume, ray) + vec2(EPSILON, -EPSILON);
	float t = tMinMax[0], tMax = tMinMax[1];
	float stepSize = (tMax - t) / numSteps;
	
	vec3 transmittance = vec3(0.0);//SampleEnvironmentMap(ray.dir);

	float outScatterOpticalDepth = 0.0;

	while (t <= tMax - EPSILON && tMax >= 0){
		vec3 point = At(ray, t);

		float distToSun = distance(sunPosition, point);
		vec3 pointToSun = normalize(sunPosition - point);

		vec3 noiseSamplePoint = point - volume.center;	
		float density = max(0.0, cnoise(noiseSamplePoint * noiseScale));

		float inScatterOpticalDepth = OpticalDepth(point, -pointToSun, numSteps);
		float inScatterPhased = inScatterOpticalDepth * Phase_Rayleigh(dot(pointToSun, -ray.dir));

		outScatterOpticalDepth += density;
		float outScatterOpticalDepth = outScatterOpticalDepth * stepSize; //OpticalDepth(point, ray.dir, numSteps);

		transmittance += density * exp(-(inScatterOpticalDepth + outScatterOpticalDepth)) * stepSize;

		t += stepSize;
	}
	
	vec3 currCumulated = _SampleNum == 1.0 ? vec3(0.0) : imageLoad(cumulativeRenderTexture, ivec2(_Pixel)).rgb;
	vec3 newCumulated = currCumulated + transmittance;

	imageStore(cumulativeRenderTexture, ivec2(_Pixel), vec4(newCumulated, 1.0));
	imageStore(finalRenderTexture, ivec2(_Pixel), vec4(newCumulated / _SampleNum, 1.0));
}
float Rand(){
	const float MAXHASH = 4294967295.0;
	const uint _seed = 1;
    uint value = uint(_Pixel.y * _RenderTextureDims.x + _Pixel.x);

    value *= _seed;
    value ^= 2747636419u;
    value *= 2654435769u;
    value ^= value >> 16;
    value *= 2654435769u;
    value ^= value >> 16;
    value *= 2654435769u;
    //_seed++;
    return float(value) / MAXHASH;
}

vec3 SampleEnvironmentMap(vec3 direction)
{
	const vec2 invAtan = vec2(0.1591, 0.3183);

    vec2 uv = vec2(atan(direction.z, direction.x), asin(direction.y));
    uv *= invAtan;
    uv += 0.5;
    
	return texture(environmentMap, uv).rgb;
};

vec2 HitVolume(Volume volume, Ray ray){
	vec3 cornerMin = volume.cornerMin;
	vec3 cornerMax = volume.cornerMax;

	float tx1 = (cornerMin.x - ray.origin.x) / ray.dir.x, tx2 = (cornerMax.x - ray.origin.x) / ray.dir.x;
    float tmin = min( tx1, tx2 ), tmax = max( tx1, tx2 );
    float ty1 = (cornerMin.y - ray.origin.y) / ray.dir.y, ty2 = (cornerMax.y - ray.origin.y) / ray.dir.y;
    tmin = max( tmin, min( ty1, ty2 ) ), tmax = min( tmax, max( ty1, ty2 ) );
    float tz1 = (cornerMin.z - ray.origin.z) / ray.dir.z, tz2 = (cornerMax.z - ray.origin.z) / ray.dir.z;
    tmin = max( tmin, min( tz1, tz2 ) ), tmax = min( tmax, max( tz1, tz2 ) );

	return vec2(max(0.0, tmin), tmax);

    //return tmax >= tmin && tmax > 0 ? HitInfo(true, max(0.0, tmin)) : NoHit;
}
vec3 At(Ray ray, float t){
	return ray.origin + ray.dir * t;
}
vec3 Saturate(vec3 v){
	return clamp(v, vec3(0.0), vec3(1.0));
}
//	Classic Perlin 3D Noise 
//	by Stefan Gustavson
//
vec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}
vec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}
vec3 fade(vec3 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}

float cnoise(vec3 P){
  vec3 Pi0 = floor(P); // Integer part for indexing
  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1
  Pi0 = mod(Pi0, 289.0);
  Pi1 = mod(Pi1, 289.0);
  vec3 Pf0 = fract(P); // Fractional part for interpolation
  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0
  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);
  vec4 iy = vec4(Pi0.yy, Pi1.yy);
  vec4 iz0 = Pi0.zzzz;
  vec4 iz1 = Pi1.zzzz;

  vec4 ixy = permute(permute(ix) + iy);
  vec4 ixy0 = permute(ixy + iz0);
  vec4 ixy1 = permute(ixy + iz1);

  vec4 gx0 = ixy0 / 7.0;
  vec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;
  gx0 = fract(gx0);
  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);
  vec4 sz0 = step(gz0, vec4(0.0));
  gx0 -= sz0 * (step(0.0, gx0) - 0.5);
  gy0 -= sz0 * (step(0.0, gy0) - 0.5);

  vec4 gx1 = ixy1 / 7.0;
  vec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;
  gx1 = fract(gx1);
  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);
  vec4 sz1 = step(gz1, vec4(0.0));
  gx1 -= sz1 * (step(0.0, gx1) - 0.5);
  gy1 -= sz1 * (step(0.0, gy1) - 0.5);

  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);
  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);
  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);
  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);
  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);
  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);
  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);
  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);

  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));
  g000 *= norm0.x;
  g010 *= norm0.y;
  g100 *= norm0.z;
  g110 *= norm0.w;
  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));
  g001 *= norm1.x;
  g011 *= norm1.y;
  g101 *= norm1.z;
  g111 *= norm1.w;

  float n000 = dot(g000, Pf0);
  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));
  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));
  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));
  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));
  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));
  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));
  float n111 = dot(g111, Pf1);

  vec3 fade_xyz = fade(Pf0);
  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);
  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);
  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); 
  return 2.2 * n_xyz;
}
float OpticalDepth(vec3 point, vec3 inDir, float numSteps){
	Ray ray = Ray(point, -inDir);

	vec2 tMinMax = HitVolume(volume, ray) + vec2(EPSILON, -EPSILON);
	float t = tMinMax[0], tMax = tMinMax[1];

	float stepSize = (tMax - t) / numSteps;

	float opticalDepth = 0.0;

	while (t <= tMax - EPSILON && tMax >= 0){
		vec3 point = At(ray, t);

		vec3 noiseSamplePoint = point - volume.center;
		float density = max(0.0, cnoise(noiseSamplePoint * noiseScale));

		opticalDepth += density * stepSize;
		
		t += stepSize;
	}
	return opticalDepth;
}
float Phase_Rayleigh(float cosTheta){
	return 3.0 * (1 + cosTheta * cosTheta) / (16.0 * PI);
}