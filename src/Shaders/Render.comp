#version 460 core

struct Camera{
	vec3 pos;

	vec3 xAxis;
	vec3 yAxis;
	vec3 zAxis;

	float focalLength;
};
struct Ray{
	vec3 origin;
	vec3 dir;
};

vec3 SampleEnvironmentMap(vec3 direction);

layout(local_size_x = 8, local_size_y = 4) in;
layout(rgba32f, binding = 0) uniform image2D outputImage;

uniform sampler2D environmentMap;

uniform Camera camera;

void main(){
	const ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);
	const vec2 outputImageDims = imageSize(outputImage);
	const vec2 uv = (vec2(gl_GlobalInvocationID) + 0.5) / outputImageDims;

	vec3 worldUV = camera.pos + 
	-camera.zAxis * camera.focalLength + 
	camera.xAxis * (outputImageDims.x / 2.0) * (uv.x * 2.0 - 1.0) +
	camera.yAxis * (outputImageDims.y / 2.0) * (uv.y * 2.0 - 1.0);

	Ray ray = Ray(camera.pos, normalize(worldUV - camera.pos));

	vec3 environmentColor = SampleEnvironmentMap(ray.dir);

	imageStore(outputImage, pixel, vec4(environmentColor, 1.0));
}

vec3 SampleEnvironmentMap(vec3 direction)
{
	const vec2 invAtan = vec2(0.1591, 0.3183);

    vec2 uv = vec2(atan(direction.z, direction.x), asin(direction.y));
    uv *= invAtan;
    uv += 0.5;
    
	return texture(environmentMap, uv).rgb;
};